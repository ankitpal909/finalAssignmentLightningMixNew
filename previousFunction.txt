//previous function ..
    previous : function(component, event, helper){
        var recordIdValue = component.get("v.recordId");
        var counterValue = component.get("v.counter");
        var pageSize = component.get("v.pageSize");
        var end = component.get("v.end");
        var wrapperSongListOnePageValue = [];
        var wrapperSongListValue = component.get("v.wrapperSongList");
        var wrapperSongListStringValue = JSON.stringify(wrapperSongListValue);		
        var start = component.get("v.start");
        var selectedPicklistValue = component.find("idPicklist").get("v.value");
        var songsBasedOnGenreTempList = [];
        if(selectedPicklistValue=='' || selectedPicklistValue=='--Any Genre--'){
            var action = component.get("c.wrapperClassSongs");
            action.setParams({
                "id" :  recordIdValue,
                "wrapSongs" : wrapperSongListStringValue           
            });            
            action.setCallback(this, function(response){
                var state = response.getState();
                if(state=="SUCCESS"){            
                    component.set("v.wrapperSongList", response.getReturnValue());
                    var wrapperSongListValue = component.get("v.wrapperSongList");
                    component.set("v.totalSize", wrapperSongListValue.length);
                    for(var i= start-pageSize; i < start ; i++){
                        wrapperSongListOnePageValue.push(wrapperSongListValue[i]);                        
                    }
                    component.set("v.wrapperSongListOnePage", wrapperSongListOnePageValue);
                }            
                start = start - counterValue;
                end = end - counterValue;
                
                component.set("v.start",start);
                component.set("v.end",end);
            });
        }
        else{
            var action = component.get("c.getSongsBasedOnGenreTwo");     
            action.setParams({
                "genre" : selectedPicklistValue,
                "id" :  recordIdValue,
                "wrapSongs" : wrapperSongListStringValue
            });            
            action.setCallback(this, function(response){
                var state = response.getState();
                if(state=="SUCCESS"){            
                    component.set("v.wrapperSongList", response.getReturnValue());
                    var wrapperSongListValue = component.get("v.wrapperSongList");
                    component.set("v.totalSize", wrapperSongListValue.length);
                    for(var i=0; i<wrapperSongListValue.length; i++){
                        if(wrapperSongListValue[i].song.Genre__c==selectedPicklistValue)
                            songsBasedOnGenreTempList.push(wrapperSongListValue[i]);                   
                    }
                    for(var i= start-pageSize; i < start ; i++){
                        if(i<songsBasedOnGenreTempList.length){
                            wrapperSongListOnePageValue.push(songsBasedOnGenreTempList[i]);                       
                        } 
                    }
                    component.set("v.wrapperSongListOnePage", wrapperSongListOnePageValue);
                }       
                start = start - counterValue;
                end = end - counterValue;
                
                component.set("v.start",start);
                component.set("v.end",end);
            });
        }
        $A.enqueueAction(action);
    },